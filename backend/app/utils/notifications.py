# File: backend/app/utils/notifications.py
# Purpose: Telegram notifications (text + photos) with safe fallbacks
from __future__ import annotations
import os
import requests
import logging
from typing import List, Optional
from sqlalchemy.orm import Session

# S·ª¨A L·ªñI: Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n import t·ª´ "." th√†nh ".." ƒë·ªÉ tr·ªè ra th∆∞ m·ª•c app
from ..database import SessionLocal
from .. import models
from ..models import get_local_time
from ..config import settings

# D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c n·∫°p t·ª´ .env v√†o settings trong main.py
TELEGRAM_ENABLED = settings.NOTIFY_TELEGRAM_ENABLED
TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN
TELEGRAM_CHAT_ID = settings.TELEGRAM_CHAT_ID

# --- C·∫¢I TI·∫æN: L∆∞u tr·ªØ ID tin nh·∫Øn cu·ªëi c√πng ---
# L∆∞u file ID trong th∆∞ m·ª•c backend, b√™n ngo√†i th∆∞ m·ª•c app
LAST_MESSAGE_ID_FILE = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "telegram_last_message_id.txt"))
logger = logging.getLogger(__name__)

def _bot_api(method: str) -> str:
    return f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/{method}"

def can_send() -> bool:
    return TELEGRAM_ENABLED and bool(TELEGRAM_BOT_TOKEN) and bool(TELEGRAM_CHAT_ID)

# --- C·∫¢I TI·∫æN: C√°c h√†m qu·∫£n l√Ω ID tin nh·∫Øn ---
def _save_last_message_id(message_id: int):
    """L∆∞u ID c·ªßa tin nh·∫Øn ƒë√£ g·ª≠i v√†o file."""
    try:
        with open(LAST_MESSAGE_ID_FILE, "w") as f:
            f.write(str(message_id))
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ l∆∞u ID tin nh·∫Øn Telegram cu·ªëi c√πng: {e}")

def _read_last_message_id() -> Optional[int]:
    """ƒê·ªçc ID c·ªßa tin nh·∫Øn cu·ªëi c√πng t·ª´ file."""
    if not os.path.exists(LAST_MESSAGE_ID_FILE):
        return None
    try:
        with open(LAST_MESSAGE_ID_FILE, "r") as f:
            content = f.read().strip()
            return int(content) if content.isdigit() else None
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ ƒë·ªçc ID tin nh·∫Øn Telegram cu·ªëi c√πng: {e}")
        return None

def delete_telegram_message(message_id: int):
    """G·ª≠i y√™u c·∫ßu x√≥a m·ªôt tin nh·∫Øn c·ª• th·ªÉ."""
    if not can_send() or not message_id:
        return
    try:
        logger.info(f"ƒêang y√™u c·∫ßu Telegram x√≥a tin nh·∫Øn ID: {message_id}")
        resp = requests.post(_bot_api("deleteMessage"), json={
            "chat_id": TELEGRAM_CHAT_ID,
            "message_id": message_id
        }, timeout=10)
        
        # Ghi log chi ti·∫øt ph·∫£n h·ªìi t·ª´ Telegram
        response_json = resp.json()
        if not response_json.get("ok"):
             logger.warning(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn Telegram {message_id}. Ph·∫£n h·ªìi t·ª´ Telegram: {resp.text}")
        else:
             logger.info(f"ƒê√£ x√≥a th√†nh c√¥ng tin nh·∫Øn ID: {message_id}")
    except Exception as e:
        logger.error(f"Ngo·∫°i l·ªá khi x√≥a tin nh·∫Øn Telegram {message_id}: {e}")

# --- H√†m send_telegram_message gi·ªØ nguy√™n ---
def send_telegram_message(text: str) -> dict:
    """G·ª≠i m·ªôt tin nh·∫Øn vƒÉn b·∫£n. Tr·∫£ v·ªÅ JSON ph·∫£n h·ªìi ho·∫∑c m·ªôt stub n·∫øu b·ªã v√¥ hi·ªáu h√≥a."""
    if not can_send():
        return {"ok": False, "skipped": True, "reason": "TELEGRAM_DISABLED_OR_MISSING_ENV"}
    try:
        resp = requests.post(_bot_api("sendMessage"), json={
            "chat_id": TELEGRAM_CHAT_ID,
            "text": text,
            "parse_mode": "HTML"
        }, timeout=10)
        return resp.json()
    except Exception as e:
        return {"ok": False, "error": str(e)}

# --- H√†m format_pending_list_for_telegram gi·ªØ nguy√™n ---
def format_pending_list_for_telegram(pending_guests: List[models.Guest]) -> str:
    """ƒê·ªãnh d·∫°ng danh s√°ch kh√°ch ƒëang ch·ªù th√†nh m·ªôt tin nh·∫Øn Telegram duy nh·∫•t."""
    now = get_local_time().strftime('%H:%M %d/%m/%Y')
    
    if not pending_guests:
        return f"‚úÖ <b>T·∫•t c·∫£ kh√°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√†o.</b>\n<i>(C·∫≠p nh·∫≠t l√∫c {now})</i>"

    header = f"üì¢ <b>DANH S√ÅCH KH√ÅCH CH·ªú V√ÄO ({len(pending_guests)} ng∆∞·ªùi)</b>\n<i>(C·∫≠p nh·∫≠t l√∫c {now})</i>"
    
    lines = [header]
    for i, guest in enumerate(pending_guests, 1):
        full_name = guest.full_name.replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
        id_card = (guest.id_card_number or 'N/A').replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
        supplier_name = (guest.supplier_name or 'N/A').replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
        license_plate = (guest.license_plate or 'N/A').replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')

        lines.append("--------------------")
        lines.append(f"{i} - <b>{full_name}</b> - {id_card}")
        lines.append(f"BKS: {license_plate} - {supplier_name}")
    
    lines.append("--------------------")
        
    message = "\n".join(lines)
    
    if len(message) > 4096:
        message = message[:4090] + "\n..."
        
    return message

# --- C·∫¢I TI·∫æN: B·ªï sung logging chi ti·∫øt v√†o to√†n b·ªô quy tr√¨nh ---
def run_pending_list_notification():
    """
    H√†m ch·∫°y n·ªÅn: X√≥a tin nh·∫Øn c≈©, l·∫•y danh s√°ch kh√°ch ƒëang ch·ªù v√† g·ª≠i m·ªôt th√¥ng b√°o t·ªïng h·ª£p m·ªõi.
    """
    logger.info("B·∫Øt ƒë·∫ßu t√°c v·ª• g·ª≠i th√¥ng b√°o danh s√°ch ch·ªù...")
    
    # 1. ƒê·ªçc v√† x√≥a tin nh·∫Øn c≈©
    last_message_id = _read_last_message_id()
    if last_message_id:
        logger.info(f"ƒê√£ t√¨m th·∫•y ID tin nh·∫Øn c≈©: {last_message_id}. ƒêang ti·∫øn h√†nh x√≥a...")
        delete_telegram_message(last_message_id)
    else:
        logger.info("Kh√¥ng t√¨m th·∫•y ID tin nh·∫Øn c≈©, s·∫Ω g·ª≠i tin nh·∫Øn m·ªõi.")

    # 2. L·∫•y danh s√°ch m·ªõi v√† t·∫°o n·ªôi dung
    db: Session = SessionLocal()
    try:
        pending_guests = db.query(models.Guest).filter(models.Guest.status == 'pending').order_by(models.Guest.created_at.asc()).all()
        logger.info(f"T√¨m th·∫•y {len(pending_guests)} kh√°ch ƒëang ch·ªù.")
        message_text = format_pending_list_for_telegram(pending_guests)
        
        # 3. G·ª≠i tin nh·∫Øn m·ªõi
        logger.info("ƒêang g·ª≠i tin nh·∫Øn m·ªõi...")
        response_data = send_telegram_message(message_text)
        
        # 4. L∆∞u ID c·ªßa tin nh·∫Øn m·ªõi n·∫øu g·ª≠i th√†nh c√¥ng
        if response_data.get("ok"):
            new_message_id = response_data.get("result", {}).get("message_id")
            if new_message_id:
                logger.info(f"G·ª≠i tin nh·∫Øn m·ªõi th√†nh c√¥ng. ID m·ªõi: {new_message_id}. ƒêang l∆∞u l·∫°i...")
                _save_last_message_id(new_message_id)
            else:
                logger.warning("G·ª≠i tin nh·∫Øn th√†nh c√¥ng nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID tin nh·∫Øn m·ªõi.")
        else:
            logger.error(f"G·ª≠i tin nh·∫Øn m·ªõi th·∫•t b·∫°i. Ph·∫£n h·ªìi t·ª´ Telegram: {response_data}")

    finally:
        db.close()
    logger.info("Ho√†n t·∫•t t√°c v·ª• g·ª≠i th√¥ng b√°o.")

